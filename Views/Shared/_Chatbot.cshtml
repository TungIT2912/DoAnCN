@* <div class="chatbox">
    <div class="chatbox-header">
        <h5>Chat với Nhân Viên</h5>
    </div>
    <div id="messagesList" class="chatbox-body"></div>
    <div class="chatbox-footer">
        <textarea id="userMessage" rows="1"></textarea>
        <button onclick="sendMessage()">Gửi</button>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    connection.on("ReceiveMessage", (user, message) => {
        displayMessage(user, message, 'system');
        saveMessage({ user: user, message: message });
    });

    connection.start().then(() => loadMessages()).catch(err => console.error(err.toString()));

    async function sendMessage() {
        const userMessage = document.getElementById('userMessage').value;
        if (!userMessage) {
            alert('Vui lòng nhập tin nhắn');
            return;
        }

        const messageRequest = {
            message: userMessage,
            connectionId: connection.connectionId
        };

        try {
            const response = await axios.post('/api/chatbot/webhook', messageRequest);
            document.getElementById('userMessage').value = '';

            // Hiển thị tin nhắn của người dùng (căn phải)
            displayMessage('Bạn', userMessage, 'user');

            // Hiển thị tin nhắn của hệ thống (căn trái)
            displayMessage('Hệ thống', response.data.fulfillmentText, 'system');

            saveMessage({ user: 'Bạn', message: userMessage });
            saveMessage({ user: 'Hệ thống', message: response.data.fulfillmentText });
        } catch (error) {
            console.error(error);
            alert('Đã xảy ra lỗi khi gửi tin nhắn');
        }
    }


    function saveMessage(message) {
        let messages = JSON.parse(localStorage.getItem('chatMessages')) || [];
        messages.push({ ...message, timestamp: new Date().getTime() });
        localStorage.setItem('chatMessages', JSON.stringify(messages));
    }

    function loadMessages() {
        let messages = JSON.parse(localStorage.getItem('chatMessages')) || [];
        const tenMinutesAgo = new Date().getTime() - 10 * 60 * 1000;
        messages = messages.filter(msg => msg.timestamp > tenMinutesAgo);
        messages.forEach(msg => {
            displayMessage(msg.user, msg.message, msg.user === 'Bạn' ? 'user' : 'system');
        });
        localStorage.setItem('chatMessages', JSON.stringify(messages));
    }

    function displayMessage(user, message, messageType) {
        const msg = document.createElement('div');
        msg.className = `message ${messageType}`;
        msg.textContent = `${user}: ${message}`;
        document.getElementById('messagesList').appendChild(msg);
        document.getElementById('messagesList').scrollTop = document.getElementById('messagesList').scrollHeight;
    }
</script>

<style>
    body {
        font-family: Arial, sans-serif;
    }

    .chatbox {
        width: 300px;
        max-height: 400px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        background-color: #ffffff;
        position: fixed;
        bottom: 20px;
        right: 20px;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        z-index: 9999;
    }

    .chatbox-header {
        background-color: #007bff;
        color: #ffffff;
        padding: 10px;
        text-align: center;
        border-bottom: 1px solid #ddd;
    }

    .chatbox-body {
        flex-grow: 1;
        padding: 10px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }

    .chatbox-footer {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ddd;
    }

        .chatbox-footer textarea {
            flex-grow: 1;
            resize: none;
            padding: 5px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .chatbox-footer button {
            margin-left: 10px;
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #ffffff;
            cursor: pointer;
        }

    /* Các kiểu cho các tin nhắn */
    .message {
        margin: 5px;
        padding: 8px;
        border-radius: 10px;
        max-width: 70%;
        word-wrap: break-word;
    }

        /* Tin nhắn của người dùng căn phải */
        .message.user {
            background-color: #007bff; /* Màu nền cho tin nhắn của người dùng */
            align-self: flex-end; /* Căn phải */
        }

        /* Tin nhắn của hệ thống căn trái */
        .message.system {
            background-color: #cce5ff; /* Màu nền cho tin nhắn của hệ thống */
            align-self: flex-start; /* Căn trái */
        }

        /* Tin nhắn của nhân viên căn trái */
        .message.employee {
            background-color: #d4edda; /* Màu nền cho tin nhắn của nhân viên */
            align-self: flex-start; /* Căn trái */
        }


</style>
 *@
<div class="chatbox-circle" onclick="toggleChatbox()">
    💬
</div>
<div class="chatbox hide">
    <div class="chatbox-header">
        <h5>Chat messages</h5>
        <button class="close-btn" onclick="toggleChatbox()">X</button>
    </div>
    <div id="messagesList" class="chatbox-body"></div>
    <div class="chatbox-footer">
        <textarea id="userMessage" rows="1" placeholder="Type message"></textarea>
        <button onclick="sendMessage()">BUTTON</button>
    </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    connection.on("ReceiveMessage", (user, message) => {
        displayMessage(user, message, 'system');
        saveMessage({ user: user, message: message });
    });

    connection.start().then(() => loadMessages()).catch(err => console.error(err.toString()));

    async function sendMessage() {
        const userMessage = document.getElementById('userMessage').value;
        if (!userMessage) {
            alert('Vui lòng nhập tin nhắn');
            return;
        }

        const messageRequest = {
            message: userMessage,
            connectionId: connection.connectionId,
        };

        try {
            const response = await axios.post('/api/chatbot/webhook', messageRequest);
            document.getElementById('userMessage').value = '';

            // Hiển thị tin nhắn của người dùng (căn phải)
            displayMessage(
                'Bạn',
                userMessage,
                'user',
                '/images/nhanvien17.jpg'
            );
            saveMessage({ user: 'Bạn', message: userMessage });
            // Hiển thị và lưu tin nhắn từ fulfillmentText nếu có dữ liệu
            if (response.data.fulfillmentText) {
                displayMessage(
                    'Hệ Thống',
                    response.data.fulfillmentText,
                    'system',
                    '/images/nhanvien1.jpg'
                );

                saveMessage({
                    user: 'Hệ Thống',
                    message: response.data.fulfillmentText,
                });
            }

            // Hiển thị và lưu tin nhắn từ fulfillmentText2 nếu có dữ liệu
            if (response.data.fulfillmentText2) {
                displayMessage(
                    'Hệ Thống',
                    response.data.fulfillmentText2,
                    'system',
                    '/images/nhanvien1.jpg'
                );

                saveMessage({
                    user: 'Hệ Thống',
                    message: response.data.fulfillmentText2,
                });
            }
            if (response.data.fulfillmentText && response.data.fulfillmentText2) {
                displayMessage(
                    'Hệ Thống',
                    response.data.fulfillmentText,
                    'system',
                    '/images/nhanvien1.jpg'
                );
                displayMessage(
                    'Hệ Thống',
                    response.data.fulfillmentText2,
                    'system',
                    '/images/nhanvien1.jpg'
                );
                saveMessage({
                    user: 'Hệ Thống',
                    message: response.data.fulfillmentText2,
                });
                saveMessage({
                    user: 'Hệ Thống',
                    message: response.data.fulfillmentText,
                });
                
            }
        } catch (error) {
            console.error(error);
            alert('Đã xảy ra lỗi khi gửi tin nhắn');
        }
    }

    function saveMessage(message) {
        let messages = JSON.parse(localStorage.getItem('chatMessages')) || [];
        messages.push({
            ...message,
            timestamp: new Date().getTime(),
            type: message.user === 'Bạn' ? 'user' : 'system',
            avatarUrl: message.user === 'Bạn' ? '/images/nhanvien17.jpg' : '/images/nhanvien1.jpg'
        });
        localStorage.setItem('chatMessages', JSON.stringify(messages));
    }

    function loadMessages() {
        let messages = JSON.parse(localStorage.getItem('chatMessages')) || [];
        const tenMinutesAgo = new Date().getTime() - 10 * 60 * 1000;

        // Lọc tin nhắn trong 10 phút gần nhất
        messages = messages.filter((msg) => msg.timestamp > tenMinutesAgo);

        // Xóa nội dung cũ
        const messagesList = document.getElementById('messagesList');
        messagesList.innerHTML = '';

        // Hiển thị từng tin nhắn
        messages.forEach((msg) => {
            displayMessage(
                msg.user,
                msg.message,
                msg.type || (msg.user === 'Bạn' ? 'user' : 'system'),
                msg.avatarUrl || (msg.user === 'Bạn' ? '/images/nhanvien17.jpg' : '/images/nhanvien1.jpg')
            );
        });

        localStorage.setItem('chatMessages', JSON.stringify(messages));
    }



    function displayMessage(user, message, messageType, avatarUrl) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${messageType}`;

        // Header (Tên và thời gian)
        const messageHeader = document.createElement('div');
        messageHeader.className = 'message-header';
        messageHeader.textContent = `${user} - ${new Date().toLocaleTimeString()}`;

        // Nội dung tin nhắn
        const messageContent = document.createElement('div');
        messageContent.className = 'message-content';

        // Avatar
        const avatar = document.createElement('img');
        avatar.src = avatarUrl || 'default-avatar.png';
        avatar.alt = 'Avatar';
        avatar.className = 'message-avatar';

        // Văn bản tin nhắn
        const messageText = document.createElement('div');
        messageText.className = 'message-text';
        messageText.innerHTML = message;
        // Chuyển đổi xuống dòng (\n -> <br>)
        messageText.innerHTML = message.replace(/\n/g, '<br>');

        // Thêm avatar và văn bản vào messageContent
        messageContent.appendChild(avatar);
        messageContent.appendChild(messageText);

        // Gắn header và messageContent vào messageDiv
        messageDiv.appendChild(messageHeader);
        messageDiv.appendChild(messageContent);

        // Thêm tin nhắn vào danh sách
        const messagesList = document.getElementById('messagesList');
        messagesList.appendChild(messageDiv);

        // Cuộn xuống cuối danh sách tin nhắn
        messagesList.scrollTop = messagesList.scrollHeight;
    }
    function toggleChatbox() {
        const chatbox = document.querySelector('.chatbox');
        const chatboxCircle = document.querySelector('.chatbox-circle');
        const messagesList = document.getElementById('messagesList');

        if (chatbox.classList.contains('hide')) {
            chatbox.classList.remove('hide');
            chatboxCircle.classList.add('hide');
            loadMessages(); 
        } else {
            chatbox.classList.add('hide');
            chatboxCircle.classList.remove('hide');
        }
    }



</script>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
    }

    .chatbox {
        width: 350px;
        max-height: 500px;
        background-color: #ffffff;
        position: fixed;
        bottom: 20px;
        right: 20px;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        z-index: 9999;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

        .chatbox.hide {
            display: none;
        }

    .chatbox-circle {
        width: 60px;
        height: 60px;
        background-color: #007bff;
        color: white;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        position: fixed;
        bottom: 20px;
        right: 20px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        cursor: pointer;
        z-index: 10000;
        font-size: 24px;
        transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
    }

        .chatbox-circle.hide {
            opacity: 0;
            transform: scale(0);
            pointer-events: none;
        }
    .chatbox-header {
        background-color: #007bff;
        color: #ffffff;
        padding: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #0056b3;
    }

        .chatbox-header h5 {
            margin: 0;
            font-size: 16px;
            font-weight: bold;
        }

        .chatbox-header .close-btn {
            background-color: transparent;
            border: none;
            color: #ffffff;
            font-size: 18px;
            cursor: pointer;
            transition: color 0.2s ease-in-out;
        }

            .chatbox-header .close-btn:hover {
                color: #ffcccc;
            }

    .chatbox-body {
        flex-grow: 1;
        padding-right: 10px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        background-color: #f9f9f9;
        justify-content: flex-start;
    }

    .chatbox-footer {
        display: flex;
        padding: 10px;
        background-color: #f1f1f1;
        border-top: 1px solid #ddd;
    }

        .chatbox-footer textarea {
            flex-grow: 1;
            resize: none;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
            background-color: #ffffff;
            color: #333;
            font-size: 14px;
            outline: none;
            transition: border-color 0.2s ease-in-out;
        }

            .chatbox-footer textarea:focus {
                border-color: #007bff;
            }

        .chatbox-footer button {
            background-color: #007bff;
            color: #ffffff;
            padding: 10px 15px;
            margin-left: 10px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.2s ease-in-out;
        }

            .chatbox-footer button:hover {
                background-color: #0056b3;
            }

    .message {
        margin: 10px 0;
        max-width: 80%;
        display: flex;
        flex-direction: column;
        align-self: flex-start;
    }

    .message-header {
        display: flex;
        justify-content: center; /* Căn giữa theo chiều ngang */
        align-items: center; /* Căn giữa theo chiều dọc */
        margin-bottom: 5px;
        width: 100%; /* Đảm bảo chiếm toàn bộ chiều rộng của message */
        text-align: center; /* Căn giữa chữ trong header */
        font-size: 10px;
    }

    .message.system .message-header {
        color: #999;
        margin-left: 20px;
    }

    .message-content {
        display: flex;
        align-items: flex-start;
        background-color: #e9ecef;
        padding: 10px;
        border-radius: 10px;
        font-size: 14px;
        color: #333;
        word-wrap: break-word;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .message.user {
        align-self: flex-end; /* Căn phải cho tin nhắn của người dùng */
        
    }

        .message.user .message-content {
            flex-direction: row-reverse; /* Đảo hướng cho tin nhắn của user */
            margin-left: 15px;
            background-color: #007bff;
        }

        .message.user .message-header {
        color: #999;
        margin-right: 10px;
        }

        .message.user .message-text {
        flex-grow: 1;
        word-wrap: break-word;
        font-size: 14px;
        margin-right:10px;
        }
    .message.system {
        align-self: flex-start; /* Căn trái cho tin nhắn của hệ thống */
        
    }
    .message.system .message-content {
            background-color: #cce5ff;
        color: #333;
        margin-right: -20px;
    }

    .message-avatar {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        margin-right: 10px;
        object-fit: cover;
    }

    .message-text {
        flex-grow: 1;
        word-wrap: break-word;
        font-size:14px;
    }

    .message.system .message-avatar {
        margin-left: 10px;
    }

    .chatbox-body::-webkit-scrollbar {
        width: 8px;
    }

    .chatbox-body::-webkit-scrollbar-thumb {
        background-color: #ccc;
        border-radius: 4px;
    }

        .chatbox-body::-webkit-scrollbar-thumb:hover {
            background-color: #007bff;
        }

</style>
