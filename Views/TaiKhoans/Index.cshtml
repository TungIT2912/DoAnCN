@model IEnumerable<WebQuanLyNhaKhoa.DTO.TaiKhoanDTO>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="table-wrapper">
    <div class="table-title">
        <h2>Thông tin tài khoản</h2>
        @* <a href="Create" class="btn btn-outline-primary"><i class="bi bi-plus-square-fill"></i> Thêm mới</a> *@
    </div>
    <div class="table-responsive">
        <table class="table table-striped table-hover" id="taiKhoanTable">
            <thead class="thead-dark text-center">
                <tr>
                    <th scope="col">Tài khoản</th>
                    <th scope="col">Chức vụ</th>
                    <th scope="col">Role</th>
                    <th scope="col" style="width: 200px;">Action</th>
                </tr>
            </thead>
            <tbody id="tableBody" class="text-center">
                <!-- Dynamic Content goes here -->
            </tbody>
        </table>
    </div>
    <div id="paginationContainer" class="pagination-controls"></div>
</div>

<script>
    let currentPage = 1;
    const pageSize = 10;

    async function fetchTaiKhoans(page) {
        try {
            const response = await fetch(`TaiKhoans/api/TaiKhoans?pageNumber=${page}&pageSize=${pageSize}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const result = await response.json();
            const taiKhoans = result.data;
            totalItems = result.totalItems;

            displayData(taiKhoans);
            setupPaginationControls(totalItems);
        } catch (error) {
            console.error('Fetch error:', error);
            alert('Không thể tải dữ liệu. Vui lòng thử lại.');
        }
    }

    function displayData(taiKhoans) {
        const tableBody = document.getElementById('taiKhoanTable').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = '';
        taiKhoans.forEach(tk => {
            const actionText = tk.isLoocked ? "Bỏ chặn" : "Chặn";

            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${tk.TenDangNhap}</td>
                <td>${tk.ChucVu}</td>
                <td>${tk.Role}</td>
                <td>
                    <a href="#" class="dropdown-item delete-item" data-id="${tk.Id}" data-islocked="${tk.isLoocked}">
                        <i class="dw dw-delete"></i> ${actionText}
                    </a>
                </td>
            `;
            tableBody.appendChild(row);
        });

        const deleteLinks = document.querySelectorAll('.delete-item');
        deleteLinks.forEach(link => {
            link.addEventListener('click', async function (e) {
                e.preventDefault();
                const id = this.getAttribute('data-id');
                const isLoocked = this.getAttribute('data-islocked') === "true";

                const confirmDelete = confirm(isLoocked
                    ? 'Bạn có chắc chắn muốn bỏ chặn tài khoản này?'
                    : 'Bạn có chắc chắn muốn chặn tài khoản này?');
                if (confirmDelete) {
                    try {
                        const lockStatus = !isLoocked;
                        const deleteResponse = await fetch(`TaiKhoans/api/TaiKhoans/Locked/${id}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ isLoocked: lockStatus })
                        });

                        if (deleteResponse.ok) {
                            alert(`Tài khoản đã được ${lockStatus ? 'chặn' : 'bỏ chặn'} thành công!`);
                            fetchTaiKhoans(); // Refresh the table
                        } else {
                            console.error('Failed to update lock status:', deleteResponse.status);
                            alert('Không thể thay đổi trạng thái chặn. Vui lòng thử lại.');
                        }
                    } catch (error) {
                        console.error('Error updating lock status:', error);
                        alert('Đã xảy ra lỗi khi thay đổi trạng thái chặn. Vui lòng thử lại.');
                    }
                }
            });
        });
    }

    function setupPaginationControls(totalItems) {
        const totalPages = Math.ceil(totalItems / pageSize);
        const paginationContainer = document.getElementById('paginationContainer');
        paginationContainer.innerHTML = '';

        for (let i = 1; i <= totalPages; i++) {
            const button = document.createElement('button');
            button.textContent = i;
            button.onclick = () => changePage(i);
            paginationContainer.appendChild(button);
        }
    }

    function changePage(pageNumber) {
        fetchTaiKhoans(pageNumber);
    }

    document.addEventListener('DOMContentLoaded', () => {
        fetchTaiKhoans(currentPage);
    });
</script>
