@{
    ViewData["Title"] = "Danh sách chẩn đoán";
    Layout = "~/Views/Shared/_LayoutCustomer.cshtml";
}
 @* 
<!DOCTYPE html>
<html>
<head>
    <title>Chat với Nhân Viên</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
</head>
<body>
    <div class="container mt-5">
        <h2>Chat với Nhân Viên</h2>
        <div class="form-group">
            <label for="userMessage">Tin nhắn:</label>
            <textarea class="form-control" id="userMessage" rows="3"></textarea>
        </div>
        <button class="btn btn-primary" onclick="sendMessage()">Gửi</button>

        <div id="messagesList" class="mt-4"></div>
    </div>

    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.on("ReceiveMessage", (user, message) => {
            displayMessage(user, message, 'alert-secondary');

            // Lưu tin nhắn vào localStorage
            saveMessage({ user: user, message: message });
        });

        connection.start().then(() => {
            // Tải lại các tin nhắn từ localStorage
            loadMessages();
        }).catch(err => console.error(err.toString()));

        async function sendMessage() {
            const userMessage = document.getElementById('userMessage').value;

            if (!userMessage) {
                alert('Vui lòng nhập tin nhắn');
                return;
            }

            const messageRequest = {
                message: userMessage,
                connectionId: connection.connectionId
            };

            try {
                const response = await axios.post('/api/chatbot/webhook', messageRequest);
                document.getElementById('userMessage').value = '';

                displayMessage('Bạn', userMessage, 'alert-primary');
                displayMessage('Hệ thống', response.data.fulfillmentText, 'alert-info');

                //Hiển thị ConnectionId
                // displayMessage('Connection ID', response.data.connectionId, 'alert-warning');

                // Lưu tin nhắn vào localStorage
                saveMessage({ user: 'Bạn', message: userMessage });
                saveMessage({ user: 'Hệ thống', message: response.data.fulfillmentText });
            } catch (error) {
                console.error(error);
                alert('Đã xảy ra lỗi khi gửi tin nhắn');
            }
        }

        function saveMessage(message) {
            let messages = JSON.parse(localStorage.getItem('chatMessages')) || [];
            messages.push({ ...message, timestamp: new Date().getTime() });
            localStorage.setItem('chatMessages', JSON.stringify(messages));
        }

        function loadMessages() {
            let messages = JSON.parse(localStorage.getItem('chatMessages')) || [];
            const tenMinutesAgo = new Date().getTime() - 10 * 60 * 1000;
            messages = messages.filter(msg => msg.timestamp > tenMinutesAgo);

            messages.forEach(msg => {
                displayMessage(msg.user, msg.message, msg.user === 'Bạn' ? 'alert-primary' : 'alert-secondary');
            });

            localStorage.setItem('chatMessages', JSON.stringify(messages));
        }

        function displayMessage(user, message, alertClass) {
            const msg = document.createElement('div');
            msg.className = `alert ${alertClass}`;
            msg.textContent = `${user}: ${message}`;
            document.getElementById('messagesList').appendChild(msg);
        }
    </script>
</body>
</html>
 *@


<!DOCTYPE html>
<html>
<head>
    <title>Chat với Nhân Viên</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            height: 100vh;
            background-color: #f4f4f4;
            display: flex;
            justify-content: flex-end;
            align-items: flex-end;
        }

        .chatbox {
            width: 300px;
            max-height: 400px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            background-color: #ffffff;
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chatbox-header {
            background-color: #007bff;
            color: #ffffff;
            padding: 10px;
            text-align: center;
            border-bottom: 1px solid #ddd;
        }

        .chatbox-body {
            flex-grow: 1;
            padding: 10px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .chatbox-footer {
            display: flex;
            padding: 10px;
            border-top: 1px solid #ddd;
        }

            .chatbox-footer textarea {
                flex-grow: 1;
                resize: none;
                padding: 5px;
                border-radius: 5px;
                border: 1px solid #ccc;
            }

            .chatbox-footer button {
                margin-left: 10px;
                padding: 5px 10px;
                border: none;
                border-radius: 5px;
                background-color: #007bff;
                color: #ffffff;
                cursor: pointer;
            }

        .message {
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 10px;
            max-width: 70%;
            display: inline-block;
            clear: both;
            position: relative;
        }

            .message.user {
                background-color: #007bff;
                color: #ffffff;
                align-self: flex-end;
            }

            .message.system {
                background-color: #f4f4f4;
                color: #333333;
                align-self: flex-start;
            }

            .message.user::after {
                content: "";
                position: absolute;
                top: 50%;
                right: -10px;
                transform: translateY(-50%);
                border-width: 10px 0 10px 10px;
                border-style: solid;
                border-color: transparent transparent transparent #007bff;
            }

            .message.system::after {
                content: "";
                position: absolute;
                top: 50%;
                left: -10px;
                transform: translateY(-50%);
                border-width: 10px 10px 10px 0;
                border-style: solid;
                border-color: transparent #f4f4f4 transparent transparent;
            }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
</head>
<body>
    <div class="chatbox">
        <div class="chatbox-header">
            <h5>Chat với Nhân Viên</h5>
        </div>
        <div id="messagesList" class="chatbox-body"></div>
        <div class="chatbox-footer">
            <textarea id="userMessage" rows="1"></textarea>
            <button onclick="sendMessage()">Gửi</button>
        </div>
    </div>

    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.on("ReceiveMessage", (user, message) => {
            displayMessage(user, message, 'system');

            // Lưu tin nhắn vào localStorage
            saveMessage({ user: user, message: message });
        });

        connection.start().then(() => {
            // Tải lại các tin nhắn từ localStorage
            loadMessages();
        }).catch(err => console.error(err.toString()));

        async function sendMessage() {
            const userMessage = document.getElementById('userMessage').value;

            if (!userMessage) {
                alert('Vui lòng nhập tin nhắn');
                return;
            }

            const messageRequest = {
                message: userMessage,
                connectionId: connection.connectionId
            };

            try {
                const response = await axios.post('/api/chatbot/webhook', messageRequest);
                document.getElementById('userMessage').value = '';

                displayMessage('Bạn', userMessage, 'user');
                displayMessage('Hệ thống', response.data.fulfillmentText, 'system');

                // Lưu tin nhắn vào localStorage
                saveMessage({ user: 'Bạn', message: userMessage });
                saveMessage({ user: 'Hệ thống', message: response.data.fulfillmentText });
            } catch (error) {
                console.error(error);
                alert('Đã xảy ra lỗi khi gửi tin nhắn');
            }
        }

        function saveMessage(message) {
            let messages = JSON.parse(localStorage.getItem('chatMessages')) || [];
            messages.push({ ...message, timestamp: new Date().getTime() });
            localStorage.setItem('chatMessages', JSON.stringify(messages));
        }

        function loadMessages() {
            let messages = JSON.parse(localStorage.getItem('chatMessages')) || [];
            const tenMinutesAgo = new Date().getTime() - 10 * 60 * 1000;
            messages = messages.filter(msg => msg.timestamp > tenMinutesAgo);

            messages.forEach(msg => {
                displayMessage(msg.user, msg.message, msg.user === 'Bạn' ? 'user' : 'system');
            });

            localStorage.setItem('chatMessages', JSON.stringify(messages));
        }

        function displayMessage(user, message, messageType) {
            const msg = document.createElement('div');
            msg.className = `message ${messageType}`;
            msg.textContent = `${user}: ${message}`;
            document.getElementById('messagesList').appendChild(msg);
            document.getElementById('messagesList').scrollTop = document.getElementById('messagesList').scrollHeight;
        }
    </script>
</body>
</html>
