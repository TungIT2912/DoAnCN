@{
    ViewData["Title"] = "Unanswered Questions";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Unanswered Questions</h2>

<div id="questions-container">
    <!-- Questions will be loaded here -->
</div>

<script>
    // Function to fetch unanswered questions and render them in the view
    function loadUnansweredQuestions() {
        fetch('/api/answer/unanswered')
            .then(response => response.json())
            .then(data => {
                const container = document.getElementById('questions-container');
                container.innerHTML = ''; // Clear any existing content

                data.forEach(question => {
                    const questionDiv = document.createElement('div');
                    questionDiv.className = 'question-item';
                    questionDiv.innerHTML = `
                        <p><strong>Câu Hỏi:</strong> ${question.question}</p>
                        <p><strong>Thời gian:</strong> ${new Date(question.askedOn).toLocaleString()}</p>
                                <p><strong>Trạng Thái:</strong> ${question.isAnswered}</p>
                                <p><strong>Id Nhan vien:</strong> ${question.maNv}</p>
                                <p><strong>Ten Nhan Vien:</strong> ${question.answeredByName}</p>
                        <button onclick="location.href='/api/answer/post?questionId=${question.id}'">Answer</button>
                    `;
                    container.appendChild(questionDiv);
                });
            })
            .catch(error => {
                console.error('Error fetching unanswered questions:', error);
            });
    }

    // Load unanswered questions when the page loads
    document.addEventListener('DOMContentLoaded', loadUnansweredQuestions);
</script>

<style>
    .question-item {
        border: 1px solid #ccc;
        padding: 10px;
        margin: 10px 0;
    }

    .question-item button {
        margin-top: 10px;
    }
</style>
